---
format:
  fundar-revealjs: default

title: 'La cocina de [Argendata](){style="opacity: 0; color: transparent"}'
subtitle: <a href="https://argendata.fund.ar"><picture><source srcset="./argendata-logo-b.svg"><img src="argendata.fund.ar" width="700"></img></picture></a>

authors: 
  - name: Juan Pablo Ruiz Nicolini
    acknowledgements: '[\@tuqmano]()'
    affiliation: Coordinador del Área de Datos
    email: jpruiznicolini@fund.ar

  - name: Joan Imanol Gonzalez Quiroga
    affiliation: Científico de datos
    email: jigonzalezquiroga@fund.ar

---

## Hoja de ruta
::: {.notes}
Fundar (la organizacion); Datos (el equipo); Argendata (la cocina); QA; ETL; T (La segunda **T**)
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Hoja de ruta</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.incremental}
- **Fundar**
  - **Datos**
    -  Nosotros =\)

- **Argendata** -  la cocina
  - Calidad de datos
  - Proceso ETL
  - _Transformers_
:::

## Fundar
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">La organización</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

<div align='center'>
<picture>
<img src="sobrefundar.png" width=5000 style="border-radius: 20px;"></img>
</picture>
</div>

## Área Datos 
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">El equipo</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

![](datos.png){style="border-radius: 10px;"}

::: {.columns}


::: {.column}

![](instagram-gpt.png){ width=320 style="border-radius: 10px;"}         ![](instagram-bigdata.png){ width=400 style="border-radius: 10px;"}
:::

::: {.column}
![](instagram-clustering.png){ width=400 style="border-radius: 10px;"} ![](instagram-estado.png){ width=400 style="border-radius: 10px;"}

:::


:::

## Área Datos - Nosotros
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Nosotros</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.r-stack}

![](tuq.png){ width=2000 style="border-radius: 10px;"}

![](joan.png){.fragment width=2000 style="border-radius: 10px;"}

:::


## Argendata Init
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Un sitio web de Fundar</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

</br></br></br></br></br></br></br>

<picture><source srcset="./argendata-logo-b.svg"><img src="argendata.fund.ar" width="700"></img></picture>




## Argendata
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Argendata</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

<video autoplay="true" loop="true" width="2000">
<source src="argendata_preview.mp4">
</video>
<script>
document.querySelector('video').playbackRate = 0.3;
document.querySelector('video').style.borderRadius = '10px';
document.querySelector('video').play();
</script>


[argendata.fund.ar](argendata.fund.ar)

#### Datos curados por especialistas ... 


## GitHub Argendata
::: {.notes}
Argendata cuenta con su propios repositorios abiertos en GitHub, donde se encuentran los datos, scripts y documentación de los mismos.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">GitHub Argendata</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

#### Administrados por nosotros =\)

![](./argendatagithub.png){.absolute top=130 right=80 width=2000}

## Flujo
::: {.notes}
El flujo de los datos fue el siguiente: (1) se recolectan los datos provistos por les investigadores (2) los datos pasan por un control de calidad y cuando están limpios se almacenan (3) simultáneamente se espeja el trabajo que realizaron les investigadores, llevando todo a scripts en R con un formato estandarizado (3.5) de aquí se toman los datos nuevamente cuando haya que actualizarlos (4) los datos son transformados a un formato más regular para ser graficado (ej. "categoria, nombre, valor"), las recetas de las transformaciones son guardadas para ser reproducidas cuando sea necesario (5) los datos graficados van a la web. **PERO...** en la vida real **es más complejo.**
:::

<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text"><em>Flujo</em></div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>


::: {.r-stack}

![](simple-sin-loops.svg){.fragment width=1800 .fade-out fragment-index=4}

![](simple.svg){.fragment width=1800 fragment-index=4}

:::

<ul>
::: {.fragment fragment-index=1}
  <li style="color:#7bb5c4;"><span>**CONTROL DE CALIDAD**</span></li>
:::
::: {.fragment fragment-index=2}
  <li style="color:#8d9bff;"><span>**ARMONIZACIÓN DE PROCESOS**</span></li>
:::
::: {.fragment fragment-index=3}
  <li style="color:#ffab40;"><span>**TRANSPARENCIA y REPRODUCIBILIDAD**</span></li>
:::
</ul>

## Flujo... más granular
::: {.notes}
No nos perdamos: la parte superior de este nuevo diagrama es muy parecida a la que vimos antes. La recolección de datos arranca por los datos provistos, que vienen de distintas fuentes. Hay una fase intermedia de _landing_ de los datos: los almacenamos temporalmente en Google Drive para que les investigadores puedan manejarse con mayor facilidad. (No todo el mundo conoce Git/GitHub). Parte de la información que les pedimos almacenar es también _cómo_ extrajeron esos datos. Idealmente en scripts de R/Python, pero finalmente hubo mucho `.txt`. (Aprox 45% txt, 25% R, 18% dofile, 9% Python)
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text"><em>Flujo</em>... más granular</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.r-stack}

![](argendata-flujo-transparente-negro.svg){.fragment width=1700 .fade-out fragment-index=4}

![](flujo-controlcalidad.svg){.fragment width=1700 .fade-in-then-out fragment-index=1}

![](flujo-armonizacion.svg){.fragment width=1737 .fade-in-then-out fragment-index=2}

![](flujo-transparencia.svg){.fragment width=1700 .fade-in-then-out fragment-index=3}

![](argendata-flujo-transparente-negro-focus-data.svg){.fragment width=1700 .fade-in fragment-index=4}

:::

## ¡Datos abiertos!
::: {.notes}
 
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">¡Datos abiertos!</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

![](argendatadatatranengithub.png){.absolute left=290 bottom=-60}

## Controles de calidad
::: {.notes}

:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Controles de calidad</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

- Los datos son recolectados según lo hicieron lxs investigadorxs,
- automatizado a través de scripts en _**R**_ (más sobre eso después!)
- Son ~300 fuentes de +100 instituciones distintas.
- Procesadas por distintas personas, que trabajan con distintos conocimientos y herramientas.

¿Cómo hicimos para asegurar la calidad de los datos?

<img src="sankey-variabilidad-datos-entrada.png" width="1800"></img>

## Controles de calidad - Algunos problemas
::: {.notes}
Los archivos vienen de distintos workflows: Stata, R, Python, pero más que nada Excel, mucho Excel.
Y el problema de las herramientas muy empaquetadas (como Excel!!) es que para que el usuario se abstraiga
de los detalles del funcionamiento de las computadoras, toma muchísimas decisiones que no quedan bien documentadas
en ningún lado. Particularmente, las herramientas de código cerrado (como Excel!!) sólo admiten compatibilidad con
su formato cerrado, y nosotros explícitamente necesitamos que los datos estén en `.csv`.

No sólo eso, sino que usar múltiples herramientas a veces re-codifica los datos de manera distinta, y muchas veces
resalta errores.

Además, datos que vinieron de fuentes "estáticas" (tablas/imágenes en PDFs), pueden venir con caracteres que sólo aparecen
en dichos formatos
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Controles de calidad - Algunos problemas</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div> 

::: {.incremental}
- Formatos de entrada
  - Variabilidad en el tipo de archivo (csv, tsv, pdf, estáticos).
  - Variabilidad en el formato CSV (separador, _line terminator_, quoting, punto/coma decimal)

- Almacenamiento
  - Google Drive
- Control de cambios (versiones)
  - GitHub
- Encoding
  - ["Estándares"](./xkcd-standards.png)

    ![](./xkcd-standards.png){width="600"}

:::

## Controles de calidad - Algunos problemas
::: {.notes}
Bibliotecas como `charset-normalizer` o `chardet` funcionan bien en: Archivos escritos en inglés,
que sean lo suficientemente largos para su análisis (combinaciones probables entre bytes, análisis frecuencial, etc.)
y generalmente redactados en lenguaje natural. En nuestro caso, los archivos son cortos, generalmente en español, y estructurados.

Usamos `chardet` como fallback, pero Argendata cuenta con su propio detector de encoding.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Controles de calidad - Algunos problemas</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.columns}

::: {.column}
::: {.incremental}
- Encoding
  - UTF-8, UTF-8-BOM. `charset-normalizer` y compañía.
  - Caracteres invisibles
  - Re-encoding.
- Nomenclatura de fuentes.
- Nomenclatura de regiones geográficas. 

:::

:::

::: {.column}
![](supervenn-geonomenclador.png){.fragment style="color: black;"}
[argendatafundar/geonomencladores](){.fragment style="color: #151515; font-size: 0.8em;"}
:::


:::



## Controles de calidad - Haciendo zoom
::: {.notes}
Generación de Markdown con Jinja. Engine de templating hecho a mano.
Generación de PDFs con Pandoc (XeLaTeX).

Wrappers de la API de GitHub y Google Drive. (De las cuales, la última es horrible <3)
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Controles de calidad - Haciendo zoom</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

![](flujo-qa.svg){width=1800}


## Controles de calidad - Verificadores
::: {.notes}
 
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Controles de calidad - Verificadores</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

Verificaciones _paralelas_ + resumen

::: {layout-ncol="2"}

```python
import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        with self.assertRaises(TypeError):
            s.split(2)

    def test_fail(self):
      s = 'hello world'
      splitted = s.split()
      self.assertEqual(len(splitted), 3)


```

```java
test_fail (a.TestStringMethods.test_fail) ... FAIL
test_isupper (a.TestStringMethods.test_isupper) ... ok
test_split (a.TestStringMethods.test_split) ... ok
test_upper (a.TestStringMethods.test_upper) ... ok

========================================================
FAIL: test_fail (a.TestStringMethods.test_fail)
--------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 21, in test_fail
    self.assertEqual(len(splitted), 3)
AssertionError: 2 != 3

--------------------------------------------------------
Ran 4 tests in 0.001s

FAILED (failures=1)
```

:::

## Controles de calidad - Verificadores 
::: {.notes}
Las verificaciones se pueden _combinar_ de manera paralela, pero cada verificación sigue su _hilo_ secuencial. Finalmente todas confluyen hacia un resultado final a ser graficado como PDF.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Controles de calidad - Verificadores</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

Verificaciones _secuenciales_ + resumen

::: {layout-ncol="2"}


```python
from argendata.qa import Verifica

@Verifica["Archivo"]
class ControlCSV:
    a_verificar: str

    def __init__(self, path: str):
        self.a_verificar = path

    def verificacion_encoding(self, a_verificar: str):
        codecs = get_codecs(a_verificar)
        if len(codecs) > 0:
            self.codec = codecs[0][0]
        else:
            self.log.debug(...)
            self.codec = use_chardet(a_verificar)

        if self.codec is None:
            self.codec = 'utf-8'
        return self.codec
```

<img src="qa-tranen.png" width="800"></img>


:::


## ETL & Scripting
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">ETL & Scripting</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

`.Rproj`

![](etl_rstudio.png){width=3000}


## ETL & Scripting
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">ETL & Scripting</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

`{argendataR}`

![](argendataR.png)



## ETL & Scripting
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">ETL & Scripting</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>


::: {.r-stack}



![](uso-fuentes-desigu.png){.fragment width=2000}

![](uso-fuentes-mertra.png){.fragment width=2000}

![](uso-fuentes-precio.png){.fragment width=2000}

![](uso-fuentes-todos.png){.fragment width=2000}

:::


## Normalización del formato de datos: el problema
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Normalización del formato de datos: el problema</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

Veámoslo con un ejemplo. Tomemos el siguiente gráfico:

![](infdes14-webjs.png)

## Normalización del formato de datos: el problema
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Normalización del formato de datos: el problema</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.columns .incremental}

::: {.column}
Su ficha en `data/` es la siguiente:

![](infdes14-ficha.png)
:::

::: {.column .fragment}
Y así se ve el `.csv` original

::: {.fragment}
(no entra en pantalla)
:::

![](infdes14-original.png)
:::

:::

## Normalización del formato de datos: el problema
::: {.notes}
El problema no es hacerlo para _uno_ solo, sino para todos los [~300] gráficos que tiene la web.
Adicionalmente, tienen que poder ser ejecutados cuando se actualicen los datos.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Normalización del formato de datos: el problema</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.columns .incremental}

::: {.column}
Y de alguna manera, ésto ...

![](infdes14-original.png)
:::

::: {.column .fragment}

... se convierte en ésto:

![](infdes14-web.png)
:::

:::

## Normalización de la normalización
::: {.notes}
Hay múltiples maneras de realizar la misma serie de acciones.
Nuevamente tendríamos variabilidad, ahora incorporada internamente al flujo.
¿Cómo podemos admitir la colaboración colectiva de distintas personas, con distintos criterios
y niveles de conocimiento, y asegurar que el resultado final sea (casi) siempre el mismo?
Pongamos **railes** a la creación de programas. La magia está por detrás (tipos, manipulación del AST, conexión 
con la "base de datos" [llamadas a GH API y GD API], generación automática de código [imports]),
y por delante presentamos una interfaz humanamente entendible (errores legibles, nombres declarativos, _realtime feedback_)

**Algo parecido pasa con `argendataR` !!**
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Normalización de la normalización</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

[El código queda así =\)](){.fragment fragment-index=10 .absolute left=10 top=-10 style="color: black;"}
[¿Cuáles fueron los pasos de la transformación?](){.fragment fragment-index=10 .fade-out style="color: black;"}


::: {.r-stack}

![](infdes14-pseudotransformer-1.png){.absolute top=100 right=210 width=1500}

![](infdes14-pseudotransformer-2.png){.fragment .absolute top=100 right=210 width=1500 .fade-in-then-out fragment-index=1}

![](infdes14-pseudotransformer-3.png){.fragment .absolute top=100 right=210 width=1500 .fade-in-then-out fragment-index=2}

![](infdes14-pseudotransformer-4.png){.fragment .absolute top=100 right=210 width=1500 .fade-in-then-out fragment-index=3}

![](infdes14-pseudotransformer-final.png){.fragment .absolute top=100 right=210 width=1500 .fade-in-then-out fragment-index=4}

![](infdes14-transformer.png){.fragment .absolute top=100 right=210 width=1500 .fade-in-then-out fragment-index=10}

:::

## ¿Por qué no un _standalone_?
::: {.notes}
Los lenguajes específicos son muy expresivos, pero también muy restrictivos en el sentido que
para cambiar algo o hacer algo nuevo, hay que modificar el lenguaje. Dado que es un lenguaje distinto
esto implica un parser, un lexer, y un compilador/interprete. No sólo el resto de personas que trabajen
con éste tienen que aprender un nuevo lenguaje, sino que también deben tener el setup correcto.
Todo esto lleva, además, tareas de mantenimiento.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">¿Por qué no un _standalone_?</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

::: {.columns .incremental}

::: {.column}

Ejemplo de un _do-file_ de Stata.
![](dofile.png){style="border-radius: 10px;"}
:::

::: {.column .fragment .fade-right}
Lenguaje específico para transformar datasets; _"pre-alpha"_ de _transformers_.
![](ejemplo-transformer-alpha-geonom.png){style="border-radius: 10px;"}
:::

:::

## La clave es la _familiaridad_
::: {.notes}
Programar en un lenguaje y entorno familiar no garantiza una transición sin compromisos
hacia el uso de una herramienta nueva. Lo mismo pasa con bibliotecas (especialmente con grandes bibliotecas
como NumPy o Pandas), que exigen un _estilo_ de programar particular.

Sin embargo, tener la libertad de poder escribir cualquier tipo de código mientras "la mágia" pasa por detrás
es un pequeño coste a pagar por la flexibilidad y la normalización del código.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">La clave es la _familiaridad_</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>

![](wrangling.png){style="border-radius: 10px;"}

## La clave es la _familiaridad_
::: {.notes}
En principio nada prohíbe explícitamente crear funciones que hagan todo el trabajo.
Un pequeño incentivo a escribir funciones más pequeñas (aparte de los lineamientos internos sobre cómo escribir código)
es que se puedan reutilizar en otros contextos. No sólo es mejor porque genera código más declarativo y modular,
sino que también nos ahorramos re-escribir variaciones de los mismos procedimientos, y de cierta manera construímos
colectivamente un micro-lenguaje.
:::
<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">La clave es la _familiaridad_</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>


Ejemplo de una función de _transformer_ escrita de manera _ad-hoc_

```python
from pandas import to_datetime

@transformer.convert
def media_doce_meses_indicador(df: DataFrame, indicador_col = 'indicador', anio_col = 'anio', value_col = 'valor'):
    result = {'anio': [], 'indicador': [], 'valor': []}
    df[anio_col] = to_datetime(df[anio_col])
    df[value_col] = df[value_col].astype(float)
    for indicador, group in df.groupby(indicador_col):
        group = group.drop(columns = indicador_col)

        for yyyy, anio in  group.groupby(group.anio.dt.year):
            result['indicador'].append(indicador)
            result['anio'].append(yyyy)
            result['valor'].append(anio.valor.mean())

    result = DataFrame(result)
    return result
```


## Cierre

<!-- Barra superior negra  -->
<div class="top-bar">
  <div class="left"></div>
  <div class="center">
  <div class="left-text">Argendata</div>
  <div class="logo">
  <img src="./_extensions/fundar/logo_fundar-light.svg"/>
  </div></div><div class="right"></div>
</div>


![](redes_argendata.png){style="border-radius: 10px;"}

